#!/bin/bash

#
# Script variables
#
script="tower-job-output"
version="0.3"
tower_version="3.8.2"
tower=""
username=""
password=""
filename=""
format=""
hostnames=""
changed=""
job_id=""
page_size="200"
next_page=""
json_query=""
data_file="/tmp/tower_data_$(head /dev/random | tr -dc A-Za-z0-9 | head -c10)"
list_file="/tmp/tower_host_$(head /dev/random | tr -dc A-Za-z0-9 | head -c10)"

#
# Parse arguments
#
parse_args() {
	local arg="${1}"
    local valid_format
    local got_job_id

	while [ -n "${arg}" ]; do
		case "${arg}" in
		-h|--help)
			show_usage
            break
            ;;
		-t|--tower-host)
			shift
            tower="${1}"
            ;;
		-u|--username)
			shift
            username="${1}"
            ;;
		-p|--password)
			shift
            password="${1}"
            ;;
		-o|--output)
			shift
            filename="${1}"
            ;;
		-f|--format)
			shift
            format="${1}"
            for i in ansi html txt; do
                if [ "${format}" == "${i}" ]; then valid_format=y; break; fi
            done
            if [ -z "${valid_format}" ]; then
                show_usage "Invalid format: ${format}"
            fi
            ;;
		-l|--limit)
			shift
            hostnames="${1}"
            ;;
		-c|--changed)
			changed="yes"
            ;;
		*)
            if [ -n "${got_job_id}" ]; then
                show_usage "Invalid option: ${arg}"
            fi
            got_job_id=y
            job_id="${arg}"
            ;;
		esac

        shift
        arg="${1}"
	done

    if [ -z "${format}" ]; then
        format="ansi"
    fi

    if [ -n "${hostnames}" -a "${format}" == "html" ]; then
        show_usage "Invalid output format for 'limit' option"
    fi

    if [ -n "${changed}" -a "${format}" == "html" ]; then
        show_usage "Invalid output format for 'changed' option"
    fi

    if [ -z "${got_job_id}" ]; then
        show_usage "Missing job id"
    fi

    echo ""
    if [ -z "${username}" ]; then
        read -p "Username: " username
    fi

    if [ -z "${password}" ]; then
        read -s -p "Password: " password
        echo ""
    fi
}

#
# Show usage
#
show_usage() {
    local usage_error="${1}"

	if [ -n "${usage_error}" ]; then
        echo "" >&2
		echo "${usage_error}" >&2
        echo "" >&2
    fi

    echo ""
    echo "${script} v${version}"
    echo ""
    echo "    Retrieve standard output for an ansible tower job"
    echo "    API Reference: https://docs.ansible.com/ansible-tower/${tower_version}/html/towerapi/api_ref.html"
	echo ""
    echo "Usage:"
    echo ""
    echo "    ${script} [-t|--tower-host host] [-u|--username username] [-p|--password password] [-o|--output filename [-f|--format ansi|html]] [-l|--limit hostnames] [-c|--changed] [-h|--help] job-id"
	echo ""
    echo "Options:"
    echo ""
    echo "    -t, --tower-host  tower server hostname or ip address"
    echo "    -u, --username    tower username (default: prompt for username)"
    echo "    -p, --password    tower password (default: prompt for password)"
    echo "    -o, --output      save output to filename"
    echo "    -f, --format      file format (choice: ansi, html, txt. default: ansi)"
    echo "    -l, --limit       show output from hostnames only (comma separated list. cannot be used with html output format)"
    echo "    -c, --changed     show output from tasks with changed status only (cannot be used with html output format)"
    echo "    -h, --help        display this message and exit"
    echo "    job-id            tower job id"

    echo ""
	if [ -n "${usage_error}" ]; then
		exit 1
	fi

    exit
}

#
# Cleanup temp files
#
clean_up() {
    rm -rf "${data_file}"
    rm -rf "${list_file}"
}

#
# Show error
#
show_error() {
    local message="${1}"
    local details="${2}"

    echo "" >&2
    echo "${message}" >&2

    if [ -n "${details}" ]; then
        echo "${details}" >&2
    fi

    echo "" >&2
    clean_up
    exit 1
}

#
# Get data
#
get_data() {
    local result

    result=$(curl -k -s -S -f -o ${data_file} -u "${username}:${password}" "https://${tower}${next_page}" 2>&1)

    if [ $? -ne 0 ]; then
        show_error "Error retrieving data from server" "${result}"
    fi
}

#
# Get next page
#
get_next() {
    local result

    result=$(jq -r '.next' "${data_file}" 2>&1)

    if [ $? -ne 0 ]; then
        show_error "Error processing received data" "${result}"
    fi

    next_page="${result}"
}

#
# Get output list
#
get_list() {
    local result

    result=$(jq -r "${json_query}" "${data_file}" 2>&1 >> ${list_file})

    if [ $? -ne 0 ]; then
        show_error "Error processing received data" "${result}"
    fi
}

#
# Show job output
#
show_output() {
    if [ "${format}" == "html" ]; then
        next_page="/api/v2/jobs/${job_id}/stdout/?format=html"

        echo ""
        echo -n "Retrieving data. Please wait."
        get_data
        echo ""

        if [ -n "${filename}" ]; then
            cat "${data_file}" > "${filename}"
            echo "Output saved to ${filename}"
        else
            echo ""
            cat "${data_file}"
        fi
        echo ""
    elif [ "${format}" == "txt" -a -z "${hostnames}" -a -z "${changed}" ]; then
        next_page="/api/v2/jobs/${job_id}/stdout/?format=txt_download"

        echo ""
        echo -n "Retrieving data. Please wait."
        get_data
        echo ""

        if [ -n "${filename}" ]; then
            cat "${data_file}" > "${filename}"
            echo "Output saved to ${filename}"
        else
            echo ""
            cat "${data_file}"
        fi
        echo ""
    elif [ "${format}" == "ansi" -a -z "${hostnames}" -a -z "${changed}" ]; then
        next_page="/api/v2/jobs/${job_id}/stdout/?format=ansi_download"

        echo ""
        echo -n "Retrieving data. Please wait."
        get_data
        echo ""

        if [ -n "${filename}" ]; then
            cat "${data_file}" > "${filename}"
            echo "Output saved to ${filename}"
        else
            echo ""
            cat "${data_file}"
        fi
        echo ""
    else
        if [ -n "${hostnames}" ]; then
            next_page="/api/v2/jobs/${job_id}/job_events/?page_size=${page_size}&order_by=counter&or__host_name__in=${hostnames}&or__event=playbook_on_task_start"
        else
            next_page="/api/v2/jobs/${job_id}/job_events/?page_size=${page_size}&order_by=counter"
        fi

        if [ -n "${changed}" ]; then
            json_query='.results[] |
                select (
                    (."changed" == true) or (has("changed") == false) or
                    (."event" == "playbook_on_task_start") or
                    (."event" == "runner_on_file_diff") or
                    (."event" == "runner_on_error") or
                    (."event" == "runner_on_failed") or
                    (."event" == "debug") or
                    (."event" == "verbose") or
                    (."event" == "deprecated") or
                    (."event" == "warning") or
                    (."event" == "system_warning") or
                    (."event" == "error")
                ) |
                if (."event" == "playbook_on_task_start")
                then
                    if (.role != "")
                    then
                        "\r\nTASK [" + .role + " : " + .task + "]"
                    else
                        "\r\nTASK [" + .task + "]"
                    end
                elif (."stdout" != "")
                then
                    "\r\n" + .stdout
                else
                    empty
                end'
        else
            json_query='.results[] |
                select (
                    (."stdout" != "") or
                    (."event" == "playbook_on_task_start")
                ) |
                if (."event" == "playbook_on_task_start")
                then
                    if (.role != "")
                    then
                        "\r\nTASK [" + .role + " : " + .task + "]"
                    else
                        "\r\nTASK [" + .task + "]"
                    end
                else
                    "\r\n" + .stdout
                end'
        fi
        clean_up

        echo ""
        echo -n "Retrieving data. Please wait"

        while [ "${next_page}" != "null" ]; do
            echo -n "."
            get_data
            get_list
            get_next
        done
        echo ""

        if [ -n "${filename}" ]; then
            if [ "${format}" == "txt" ]; then
                cat "${list_file}" | sed "s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g" > "${filename}"
            else
                cat "${list_file}" > "${filename}"
            fi
            echo "Output saved to ${filename}"
        else
            echo ""
            if [ "${format}" == "txt" ]; then
                cat "${list_file}" | sed "s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g"
            else
                cat "${list_file}"
            fi
        fi
        echo ""
    fi

    clean_up
    exit
}

#
# Main
#
parse_args ${@}
show_output
